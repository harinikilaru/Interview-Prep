class MinStack:

    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self) -> None:
        if self.min_stack[-1] == self.stack[-1]:
            self.min_stack.pop()
        self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]
        
# Approach ðŸš€
# Push operation: Add the value to arr. If it's smaller than or equal to the current minimum, push it onto minStack as well.
# Pop operation: Remove the top element from arr. If the popped element is the current minimum, pop it from minStack too.
# Top operation: Return the last element in arr.
# GetMin operation: Return the last element in minStack, which keeps track of the minimum element.
# Time complexity:
# push: O(1)
# pop: O(1)
# top: O(1)
# getMin: O(1)
# Space complexity: O(n) due to the two stacks.


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
